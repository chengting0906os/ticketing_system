# BDD Test Pattern Configuration

given_patterns:
  entity_creation:
    single: 'a {entity} exists:'
    multiple: '{entities} exist:'
    with_qualifier: 'a {entity} exists with {qualifier}:'
    example: |
      Given a user exists:
        | id | email | name | role |

  authentication:
    pattern: 'I am logged in as:'
    example: |
      Given I am logged in as:
        | email | password |

  state_setup:
    pattern: 'the {entity} {action}'
    example: 'the buyer pays for the booking'

when_patterns:
  action:
    success: 'the {actor} {action}'
    attempt: 'the {actor} tries to {action}'
    with_data: 'the {actor} {action} with:'
    example: |
      When the buyer creates an booking for the product
      When the buyer tries to cancel the booking
      When the buyer pays with:
        | card_number |

  query:
    pattern: '{actor} with id {id} requests {resource}'
    with_filter: '{actor} with id {id} requests {resource} with {filter}'

then_patterns:
  status_validation:
    formats:
      - 'the response status code should be:'
      - 'get status code:'
    example: |
      Then the response status code should be:
        | 201 |

  error_validation:
    pattern: 'the error message should contain:'
    example: |
      Then the error message should contain:
        | Cannot perform this action |

  entity_state:
    current: 'the {entity} should be:'
    unchanged: 'the {entity} should remain:'
    fields: 'the {entity} should have:'
    example: |
      Then the booking status should be:
        | paid |

  creation_result:
    pattern: 'the {entity} should be created with:'
    validates: 'Created entity fields with 201 status'

  list_result:
    count: 'the response should contain {entities}:'
    details: 'the {entities} should include:'
    filter: 'all {entities} should have {field}:'

datatable_formats:
  single_value: |
    | value |
    Used for: status codes, single assertions

  key_value: |
    | field1 | field2 | field3 |
    | value1 | value2 | value3 |
    Used for: entity creation, multi-field validation

  multi_row: |
    | id | name | status |
    | 1  | foo  | active |
    | 2  | bar  | inactive |
    Used for: batch creation, list validation

special_values:
  nullability:
    - 'not_null': Must have value
    - 'null': Must be empty
  patterns:
    - 'MOCK_*': Wildcard pattern matching

conventions:
  naming:
    - Use lowercase with underscores for status values
    - Use datatable for all assertions (consistency)
  
  step_reusability:
    - Prefer parameterized steps over specific ones
    - Use 'tries to' prefix for expected failures
    - Use 'should remain' for unchanged state verification