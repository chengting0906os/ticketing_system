"""initial_complete_schema

Revision ID: e65dd819cb6b
Revises:
Create Date: 2025-09-25 01:26:24.355076

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'e65dd819cb6b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_booking_buyer_id'), table_name='booking')
    op.drop_index(op.f('ix_booking_event_id'), table_name='booking')
    op.drop_index(op.f('ix_booking_status'), table_name='booking')
    op.add_column('event', sa.Column('description', sa.String(), nullable=False))
    op.add_column('event', sa.Column('seller_id', sa.Integer(), nullable=False))
    op.add_column('event', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('event', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('event', sa.Column('venue_name', sa.String(length=255), nullable=False))
    op.add_column('event', sa.Column('seating_config', sa.JSON(), nullable=False))
    op.create_foreign_key(None, 'event', 'user', ['seller_id'], ['id'])
    op.drop_column('event', 'date')
    op.drop_column('event', 'updated_at')
    op.drop_column('event', 'created_at')
    op.drop_column('event', 'venue')
    op.add_column('ticket', sa.Column('row_number', sa.Integer(), nullable=False))
    op.add_column('ticket', sa.Column('seat_number', sa.Integer(), nullable=False))
    op.add_column('ticket', sa.Column('buyer_id', sa.Integer(), nullable=True))
    op.add_column('ticket', sa.Column('reserved_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column(
        'ticket',
        'subsection',
        existing_type=sa.VARCHAR(length=10),
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using='subsection::integer',
    )
    op.drop_index(op.f('ix_ticket_event_id'), table_name='ticket')
    op.drop_index(op.f('ix_ticket_status'), table_name='ticket')
    op.drop_constraint(op.f('unique_seat_per_event'), 'ticket', type_='unique')
    op.create_unique_constraint(
        'uq_ticket_seat',
        'ticket',
        ['event_id', 'section', 'subsection', 'row_number', 'seat_number'],
    )
    op.create_foreign_key(None, 'ticket', 'user', ['buyer_id'], ['id'])
    op.drop_column('ticket', 'seat')
    op.drop_column('ticket', 'row')
    op.add_column('user', sa.Column('hashed_password', sa.String(length=255), nullable=False))
    op.add_column('user', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('user', sa.Column('is_superuser', sa.Boolean(), nullable=False))
    op.add_column('user', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.alter_column(
        'user',
        'name',
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=255),
        existing_nullable=False,
    )
    op.drop_column('user', 'updated_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'user',
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.alter_column(
        'user',
        'name',
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.drop_column('user', 'is_verified')
    op.drop_column('user', 'is_superuser')
    op.drop_column('user', 'is_active')
    op.drop_column('user', 'hashed_password')
    op.add_column('ticket', sa.Column('row', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ticket', sa.Column('seat', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'ticket', type_='foreignkey')  # pyright: ignore[reportArgumentType]
    op.drop_constraint('uq_ticket_seat', 'ticket', type_='unique')
    op.create_unique_constraint(
        op.f('unique_seat_per_event'),
        'ticket',
        ['event_id', 'section', 'subsection', 'row', 'seat'],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(op.f('ix_ticket_status'), 'ticket', ['status'], unique=False)
    op.create_index(op.f('ix_ticket_event_id'), 'ticket', ['event_id'], unique=False)
    op.alter_column(
        'ticket',
        'subsection',
        existing_type=sa.Integer(),
        type_=sa.VARCHAR(length=10),
        existing_nullable=False,
    )
    op.drop_column('ticket', 'reserved_at')
    op.drop_column('ticket', 'buyer_id')
    op.drop_column('ticket', 'seat_number')
    op.drop_column('ticket', 'row_number')
    op.add_column(
        'event', sa.Column('venue', sa.VARCHAR(length=255), autoincrement=False, nullable=False)
    )
    op.add_column(
        'event',
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        'event',
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        'event',
        sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, 'event', type_='foreignkey')  # pyright: ignore[reportArgumentType]
    op.drop_column('event', 'seating_config')
    op.drop_column('event', 'venue_name')
    op.drop_column('event', 'status')
    op.drop_column('event', 'is_active')
    op.drop_column('event', 'seller_id')
    op.drop_column('event', 'description')
    op.create_index(op.f('ix_booking_status'), 'booking', ['status'], unique=False)
    op.create_index(op.f('ix_booking_event_id'), 'booking', ['event_id'], unique=False)
    op.create_index(op.f('ix_booking_buyer_id'), 'booking', ['buyer_id'], unique=False)
    # ### end Alembic commands ###
