"""remove price from event

Revision ID: b5d48fa4c987
Revises: b801189f4441
Create Date: 2025-09-14 20:04:00.933443

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b5d48fa4c987'
down_revision: Union[str, Sequence[str], None] = 'b801189f4441'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_ticket_buyer_id'), table_name='ticket')
    op.drop_index(op.f('idx_ticket_event_id'), table_name='ticket')
    op.drop_index(op.f('idx_ticket_event_section'), table_name='ticket')
    op.drop_index(op.f('idx_ticket_order_id'), table_name='ticket')
    op.drop_index(op.f('idx_ticket_seat_lookup'), table_name='ticket')
    op.drop_index(op.f('idx_ticket_status'), table_name='ticket')
    op.drop_table('ticket')
    op.drop_index(op.f('idx_event_active_status'), table_name='event')
    op.drop_index(op.f('idx_event_is_active'), table_name='event')
    op.drop_index(op.f('idx_event_seller_id'), table_name='event')
    op.drop_index(op.f('idx_event_status'), table_name='event')
    op.drop_column('event', 'price')
    op.drop_index(op.f('idx_order_buyer_id'), table_name='order')
    op.drop_index(op.f('idx_order_buyer_status'), table_name='order')
    op.drop_index(op.f('idx_order_event_id'), table_name='order')
    op.drop_index(op.f('idx_order_seller_id'), table_name='order')
    op.drop_index(op.f('idx_order_seller_status'), table_name='order')
    op.drop_index(op.f('idx_order_status'), table_name='order')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_order_status'), 'order', ['status'], unique=False)
    op.create_index(op.f('idx_order_seller_status'), 'order', ['seller_id', 'status'], unique=False)
    op.create_index(op.f('idx_order_seller_id'), 'order', ['seller_id'], unique=False)
    op.create_index(op.f('idx_order_event_id'), 'order', ['event_id'], unique=False)
    op.create_index(op.f('idx_order_buyer_status'), 'order', ['buyer_id', 'status'], unique=False)
    op.create_index(op.f('idx_order_buyer_id'), 'order', ['buyer_id'], unique=False)
    op.add_column('event', sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_index(op.f('idx_event_status'), 'event', ['status'], unique=False)
    op.create_index(op.f('idx_event_seller_id'), 'event', ['seller_id'], unique=False)
    op.create_index(op.f('idx_event_is_active'), 'event', ['is_active'], unique=False)
    op.create_index(op.f('idx_event_active_status'), 'event', ['is_active', 'status'], unique=False)
    op.create_table(
        'ticket',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('section', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column('subsection', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('row_number', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('seat_number', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            'status',
            sa.VARCHAR(length=20),
            server_default=sa.text("'available'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('buyer_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            'created_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            'expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            'reserved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(['buyer_id'], ['user.id'], name=op.f('ticket_buyer_id_fkey')),
        sa.ForeignKeyConstraint(['event_id'], ['event.id'], name=op.f('ticket_event_id_fkey')),
        sa.ForeignKeyConstraint(['order_id'], ['order.id'], name=op.f('ticket_order_id_fkey')),
        sa.PrimaryKeyConstraint('id', name=op.f('ticket_pkey')),
        sa.UniqueConstraint(
            'event_id',
            'section',
            'subsection',
            'row_number',
            'seat_number',
            name=op.f('uq_ticket_seat'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f('idx_ticket_status'), 'ticket', ['status'], unique=False)
    op.create_index(
        op.f('idx_ticket_seat_lookup'),
        'ticket',
        ['event_id', 'section', 'subsection', 'row_number', 'seat_number'],
        unique=False,
    )
    op.create_index(op.f('idx_ticket_order_id'), 'ticket', ['order_id'], unique=False)
    op.create_index(
        op.f('idx_ticket_event_section'),
        'ticket',
        ['event_id', 'section', 'subsection'],
        unique=False,
    )
    op.create_index(op.f('idx_ticket_event_id'), 'ticket', ['event_id'], unique=False)
    op.create_index(op.f('idx_ticket_buyer_id'), 'ticket', ['buyer_id'], unique=False)
    # ### end Alembic commands ###
