"""change_booking_id_to_varchar

Revision ID: 0002
Revises: 0001
Create Date: 2025-10-31

Changes:
- Modify booking.id from INTEGER (autoincrement) to VARCHAR(36) for UUID7 support
- This enables using UUID7 strings as booking IDs generated by the application layer
"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0002'
down_revision: Union[str, Sequence[str], None] = '0001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Upgrade schema: Change booking.id from INTEGER to VARCHAR(36)

    Migration strategy:
    1. Create new temporary column for VARCHAR UUID
    2. Copy existing IDs (convert INTEGER to VARCHAR)
    3. Drop old column and constraints
    4. Rename new column to 'id'
    5. Add new primary key constraint

    Note: This is a breaking change - existing INTEGER IDs will be converted to strings.
    For production, consider a more sophisticated migration strategy (e.g., dual-column period).
    """

    # Step 1: Add new column with UUID type
    op.add_column(
        'booking',
        sa.Column('id_new', sa.String(length=36), nullable=True)
    )

    # Step 2: Copy existing INTEGER IDs to new VARCHAR column (cast to string)
    # This allows existing data to be preserved during migration
    op.execute(
        """
        UPDATE booking
        SET id_new = CAST(id AS VARCHAR)
        """
    )

    # Step 3: Make id_new NOT NULL after data migration
    op.alter_column('booking', 'id_new', nullable=False)

    # Step 4: Drop existing primary key constraint
    # Note: Constraint name might vary depending on PostgreSQL version
    op.drop_constraint('booking_pkey', 'booking', type_='primary')

    # Step 5: Drop old INTEGER column
    op.drop_column('booking', 'id')

    # Step 6: Rename new column to 'id'
    op.alter_column('booking', 'id_new', new_column_name='id')

    # Step 7: Add new primary key constraint
    op.create_primary_key('booking_pkey', 'booking', ['id'])


def downgrade() -> None:
    """
    Downgrade schema: Revert booking.id from VARCHAR(36) back to INTEGER

    WARNING: This will fail if any VARCHAR IDs cannot be converted to INTEGER!
    Only safe if all IDs are still numeric strings from original migration.
    """

    # Step 1: Add temporary INTEGER column
    op.add_column(
        'booking',
        sa.Column('id_old', sa.Integer(), autoincrement=True, nullable=True)
    )

    # Step 2: Try to convert VARCHAR IDs back to INTEGER
    # This will FAIL if any UUIDs exist (non-numeric strings)
    op.execute(
        """
        UPDATE booking
        SET id_old = CAST(id AS INTEGER)
        """
    )

    # Step 3: Make id_old NOT NULL
    op.alter_column('booking', 'id_old', nullable=False)

    # Step 4: Drop existing primary key
    op.drop_constraint('booking_pkey', 'booking', type_='primary')

    # Step 5: Drop VARCHAR column
    op.drop_column('booking', 'id')

    # Step 6: Rename old column back to 'id'
    op.alter_column('booking', 'id_old', new_column_name='id')

    # Step 7: Recreate primary key and autoincrement
    op.create_primary_key('booking_pkey', 'booking', ['id'])

    # Step 8: Reset sequence for autoincrement (PostgreSQL specific)
    op.execute(
        """
        SELECT setval('booking_id_seq', COALESCE(MAX(id), 1), true) FROM booking
        """
    )
