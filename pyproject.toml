[project]
name = "py-arch-lab"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13,<3.14"
dependencies = [
    "fastapi",
    "granian[reload]",
    "uvloop",
    "sqlalchemy",
    "asyncpg",
    "pydantic",
    "pydantic-settings",
    "pytest-bdd-ng>=2.3.1",
    "psycopg2-binary>=2.9.10",
    "alembic>=1.16.4",
    "loguru>=0.7.3",
    "quixstreams[protobuf]>=3.23.0",
    "grpcio-tools>=1.0.0",
    "sse-starlette>=3.0.2",
    "uuid-v7>=1.0.0",
    "orjson>=3.11.3",
    "anyio>=4.10.0",
    "email-validator>=2.3.0",
    "pyjwt>=2.10.1",
    "uvicorn>=0.37.0",
    "greenlet>=3.2.4",
    "bcrypt>=5.0.0",
    "attrs>=24.0.0",
    "dependency-injector>=4.48.2",
]

[dependency-groups]
dev = [
    "pyright",
    "pytest",
    "pytest-asyncio",
    "httpx",
    "ruff",
    "pytest-bdd-ng>=2.3.1",
    "pytest-postgresql>=7.0.2",
    "psycopg-binary>=3.2.9",
    "pre-commit>=4.3.0",
]

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py313"
exclude = ["src/shared/alembic/", "scripts/"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "B", # flake8-bugbear
    "I", # isort import sorting
    "W", # pycodestyle warnings
]
# If warning hints are annoying while coding, check their type and disable them
# They'll still be fixed when you save or run 'ruff check --fix .'
ignore = [
    "I001", # unsorted-imports 
    "E201", # ignore whitespace after '(' warning
    "E202", # ignore whitespace before ')' warning
    "E241", # allow multiple spaces for alignment
    "E272", # allow multiple spaces before keyword
    "E231", # missing whitespace after comma
    "W291", # trailing whitespace
    "W293", # line contains whitespace
    "E501", # ignore line too long warning
    "D107", # ignore missing docstring in __init__
    "C901", # too complex
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "B008", # Do not perform function call in argument defaults (needed for FastAPI Depends)
    "E722",
]
unfixable = ["F401", "F841"] # unused-import, unused-variable 

[tool.ruff.lint.isort]
order-by-type = true
force-sort-within-sections = true
force-single-line = false
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false # preserve trailing commas

[tool.pytest.ini_options]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: mark test as async",
    "bdd: BDD scenario tests",
    "api: API tests",
    "entity: Entity tests",
    "integration: Integration tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:pydantic._internal._config",
    "ignore::pytest.PytestReturnNotNoneWarning",
]
testpaths = ["tests"]
# pytest-bdd configuration
bdd_features_base_dir = "tests/features/"
addopts = "-v --tb=short --strict-markers"

[tool.pyright]
include = ["src", "tests"]
exclude = ["src/shared/alembic/", "scripts/"]
pythonVersion = "3.13"
typeCheckingMode = "standard"
venvPath = "."
venv = ".venv"

[tool.uv]
package = false
