
#
# =============================================================================

# YAML anchor for shared ScyllaDB configuration (must be outside services)
x-scylladb-common: &scylladb-common
  image: scylladb/scylla:6.2
  healthcheck:
    test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
    interval: 15s
    timeout: 10s
    retries: 10
    start_period: 90s
  networks:
    - ticketing-network
  mem_limit: 1536M
  memswap_limit: 1536M
  ulimits:
    memlock: -1

services:
  # =============================================================================
  # Kafka 3-Broker Cluster with KRaft (no Zookeeper)
  # - Provides high availability and fault tolerance
  # - Replication factor: 3 (can tolerate 1 broker failure)
  # - Min ISR: 2 (ensures data durability)
  # =============================================================================

  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:29092,CONTROLLER://kafka1:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx1536M"
      # Auto-create topics with replication factor 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    mem_limit: 2G
    memswap_limit: 2G

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9093:9093"
      - "9102:9102"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka2:29092,CONTROLLER://kafka2:29093,PLAINTEXT_HOST://0.0.0.0:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx1536M"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    mem_limit: 2G
    memswap_limit: 2G

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    ports:
      - "9094:9094"
      - "9103:9103"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:29092,PLAINTEXT_HOST://localhost:9094'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka3:29092,CONTROLLER://kafka3:29093,PLAINTEXT_HOST://0.0.0.0:9094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx1536M"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    mem_limit: 2G
    memswap_limit: 2G

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - ticketing-network

  # Kvrocks - Redis-compatible cache with RocksDB backend
  kvrocks:
    image: apache/kvrocks:latest
    container_name: kvrocks
    ports:
      - "6666:6666"
    command: [ "--bind", "0.0.0.0" ]
    volumes:
      - kvrocks_data:/var/lib/kvrocks
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6666", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ticketing-network

  # ScyllaDB - High-performance NoSQL database (3-node cluster)

  # Initialize Docker Desktop VM for ScyllaDB (macOS only)
  scylla-init:
    image: alpine:latest
    container_name: scylla-init
    privileged: true
    pid: host
    command: >
      sh -c " echo 'ðŸ”§ Configuring AIO limits for ScyllaDB...'; nsenter -t 1 -m -u -n -i -- sh -c '
        sysctl -w fs.aio-max-nr=1048576 &&
        echo \"fs.aio-max-nr = 1048576\" >> /etc/sysctl.conf
      ' && echo 'âœ… AIO limits configured: fs.aio-max-nr=1048576' "
    restart: "no"
    networks:
      - ticketing-network

  scylladb1:
    <<: *scylladb-common
    container_name: scylladb1
    command: --smp 1 --memory 1400M --reserve-memory 0M --overprovisioned 1 --api-address 0.0.0.0 --developer-mode 1
    ports:
      - "9042:9042" # CQL native protocol
      - "10000:10000" # REST API
    volumes:
      - scylladb1_data:/var/lib/scylla
    depends_on:
      scylla-init:
        condition: service_completed_successfully

  scylladb2:
    <<: *scylladb-common
    container_name: scylladb2
    command: --smp 1 --memory 1400M --reserve-memory 0M --overprovisioned 1 --seeds=scylladb1 --api-address 0.0.0.0 --developer-mode 1
    ports:
      - "9043:9042"
      - "10001:10000"
    volumes:
      - scylladb2_data:/var/lib/scylla
    depends_on:
      scylla-init:
        condition: service_completed_successfully
      scylladb1:
        condition: service_started

  scylladb3:
    <<: *scylladb-common
    container_name: scylladb3
    command: --smp 1 --memory 1400M --reserve-memory 0M --overprovisioned 1 --seeds=scylladb1 --api-address 0.0.0.0 --developer-mode 1
    ports:
      - "9044:9042"
      - "10002:10000"
    volumes:
      - scylladb3_data:/var/lib/scylla
    depends_on:
      scylla-init:
        condition: service_completed_successfully
      scylladb1:
        condition: service_started

  scylladb4:
    <<: *scylladb-common
    container_name: scylladb4
    command: --smp 1 --memory 1400M --reserve-memory 0M --overprovisioned 1 --seeds=scylladb1 --api-address 0.0.0.0 --developer-mode 1
    ports:
      - "9045:9042"
      - "10003:10000"
    volumes:
      - scylladb4_data:/var/lib/scylla
    depends_on:
      scylla-init:
        condition: service_completed_successfully
      scylladb1:
        condition: service_started

  scylladb5:
    <<: *scylladb-common
    container_name: scylladb5
    command: --smp 1 --memory 1400M --reserve-memory 0M --overprovisioned 1 --seeds=scylladb1 --api-address 0.0.0.0 --developer-mode 1
    ports:
      - "9046:9042"
      - "10004:10000"
    volumes:
      - scylladb5_data:/var/lib/scylla
    depends_on:
      scylla-init:
        condition: service_completed_successfully
      scylladb1:
        condition: service_started

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ticketing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ticketing-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ticketing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ticketing-network

  # Loki log aggregation
  # =============================================================================
  # Microservices Architecture
  # Each service has its own API + Consumer following Bounded Context principle
  # =============================================================================

  # ============= TICKETING SERVICE =============
  # Handles: User Auth, Event Management, Booking Operations
  # Architecture: 2 instances Ã— 4 workers = 8 concurrent processing units
  # - Load balanced by NGINX
  # - Kafka consumer group auto-balances partitions across instances
  # =============================================================================

  # Shared configuration anchor
  x-ticketing-service-common: &ticketing-service-common
    build:
      context: .
      target: development
    expose:
      - "8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      # ScyllaDB
      SCYLLA_CONTACT_POINTS: '["scylladb1"]'
      SCYLLA_PORT: 9042
      SCYLLA_KEYSPACE: ticketing_system
      SCYLLA_USERNAME: cassandra
      SCYLLA_PASSWORD: cassandra
      # Kafka (3-broker cluster)
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      # Kvrocks
      KVROCKS_HOST: kvrocks
      KVROCKS_PORT: 6666
      # OpenTelemetry / Jaeger
      JAEGER_HOST: jaeger
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      # Application
      DEBUG: "false"
      TZ: "Asia/Taipei"
    env_file:
      - .env.example
    volumes:
      - ./src:/app/src:ro
      - ./script:/app/script:ro
      - ./test:/app/test
      - ./logs:/app/logs
      - ./pyproject.toml:/app/pyproject.toml:ro
    command: [ "uv", "run", "granian", "src.service.ticketing.main:app", "--interface", "asgi", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--reload", "--reload-paths", "src" ]
    depends_on:
      scylladb1:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    networks:
      - ticketing-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  ticketing-service-1:
    <<: *ticketing-service-common
    container_name: ticketing-service-1
    hostname: ticketing-service-1
    ports:
      - "8101:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      SCYLLA_CONTACT_POINTS: '["scylladb1"]'
      SCYLLA_PORT: 9042
      SCYLLA_KEYSPACE: ticketing_system
      SCYLLA_USERNAME: cassandra
      SCYLLA_PASSWORD: cassandra
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      KAFKA_CONSUMER_INSTANCE_ID: "consumer-ticketing-1"
      KAFKA_PRODUCER_INSTANCE_ID: "producer-ticketing-1"
      KVROCKS_HOST: kvrocks
      KVROCKS_PORT: 6666
      JAEGER_HOST: jaeger
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      DEBUG: "false"
      TZ: "Asia/Taipei"

  ticketing-service-2:
    <<: *ticketing-service-common
    container_name: ticketing-service-2
    hostname: ticketing-service-2
    ports:
      - "8102:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      SCYLLA_CONTACT_POINTS: '["scylladb1"]'
      SCYLLA_PORT: 9042
      SCYLLA_KEYSPACE: ticketing_system
      SCYLLA_USERNAME: cassandra
      SCYLLA_PASSWORD: cassandra
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      KAFKA_CONSUMER_INSTANCE_ID: "consumer-ticketing-2"
      KAFKA_PRODUCER_INSTANCE_ID: "producer-ticketing-2"
      KVROCKS_HOST: kvrocks
      KVROCKS_PORT: 6666
      JAEGER_HOST: jaeger
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      DEBUG: "false"
      TZ: "Asia/Taipei"

  # ============= SEAT RESERVATION SERVICE =============
  # NOTE: Seat reservation has been merged into ticketing-service
  # See commit 987da05: "refactor: combine reservation service into ticketing service"

  # =============================================================================
  # NGINX Load Balancer (Simulates AWS ALB for local development)
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: ticketing-nginx-lb
    ports:
      - "80:80" # Main entry point - all traffic goes through here
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx # Nginx access/error logs
    networks:
      - ticketing-network
    depends_on:
      ticketing-service-1:
        condition: service_healthy
      ticketing-service-2:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # JAEGER (OpenTelemetry Tracing Backend)
  # =============================================================================

  jaeger:
    image: jaegertracing/all-in-one:1.74.0
    container_name: jaeger
    ports:
      - "6831:6831/udp" # Jaeger agent UDP (Thrift compact protocol)
      - "16686:16686" # Jaeger UI
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "14269:14269" # Admin/metrics port
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      LOG_LEVEL: "debug"
      # Metrics configuration
      METRICS_BACKEND: "prometheus"
      METRICS_HTTP_ROUTE: "/metrics"
    networks:
      - ticketing-network
    restart: unless-stopped

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  kvrocks_data:
  scylladb1_data:
  scylladb2_data:
  scylladb3_data:
  scylladb4_data:
  scylladb5_data:
  prometheus_data:
  grafana_data:


networks:
  ticketing-network:
    driver: bridge
