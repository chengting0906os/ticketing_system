# =============================================================================
# DATABASE (Optional - can use external database)
# =============================================================================
#
# Option 1: Use standalone database (docker-compose.db.yml)
#   docker-compose -f docker-compose.db.yml up -d
#   Then comment out this postgres service
#
# Option 2: Use this embedded database (default for quick start)
#   Keep this service enabled for all-in-one deployment
#
# =============================================================================

services:
  postgres:
    image: postgres:16-alpine
    container_name: ticketing_system_db
    environment:
      POSTGRES_DB: ticketing_system_db
      POSTGRES_USER: py_arch_lab
      POSTGRES_PASSWORD: py_arch_lab
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U py_arch_lab" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketing-network

  # Kafka with KRaft mode (no Zookeeper)
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:29092,CONTROLLER://kafka1:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms1G -Xmx2G"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9093:9093"
      - "9102:9102"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka2:29092,CONTROLLER://kafka2:29093,PLAINTEXT_HOST://0.0.0.0:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms1G -Xmx2G"
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    ports:
      - "9094:9094"
      - "9103:9103"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:29092,PLAINTEXT_HOST://localhost:9094'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka3:29092,CONTROLLER://kafka3:29093,PLAINTEXT_HOST://0.0.0.0:9094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_HEAP_OPTS: "-Xms1G -Xmx2G"
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - ticketing-network
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - ticketing-network

  # Kvrocks - Redis-compatible cache with RocksDB backend
  kvrocks:
    image: apache/kvrocks:latest
    container_name: kvrocks
    ports:
      - "6666:6666"
    command: [ "--bind", "0.0.0.0" ]
    volumes:
      - kvrocks_data:/var/lib/kvrocks
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6666", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ticketing-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ticketing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ticketing-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ticketing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ticketing-network

  # Loki log aggregation
  loki:
    image: grafana/loki:latest
    container_name: ticketing-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - ticketing-network

  # Promtail log collector
  promtail:
    image: grafana/promtail:latest
    container_name: ticketing-promtail
    volumes:
      - ./logs:/var/log/ticketing:ro # 收集應用日誌
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # 收集容器日誌
      - ./observability/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ticketing-network
    depends_on:
      - loki

  # =============================================================================
  # API Gateway (LocalStack - AWS Simulation)
  # =============================================================================

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "8000:4566" # API Gateway endpoint (external:internal)
      - "4566:4566" # LocalStack Gateway (all AWS services)
      - "4510-4559:4510-4559" # External services port range
    environment:
      - SERVICES=apigateway,lambda,iam,s3,ssm,cloudformation
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      # Note: Bash scripts removed - use AWS CDK for infrastructure management
      # Old approach: ./localstack:/etc/localstack/init/ready.d
      # New approach: make cdk-deploy (Python-based Infrastructure as Code)
      - localstack_data:/var/lib/localstack
    networks:
      - ticketing-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/_localstack/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Microservices Architecture
  # Each service has its own API + Consumer following Bounded Context principle
  # =============================================================================

  # ============= TICKETING SERVICE =============
  # Handles: User Auth, Event Management, Booking Operations

  ticketing-service:
    build:
      context: .
      target: development
    # Note: No container_name to allow scaling with --scale
    ports:
      - "8100:8000" # Port range for scaled instances
    expose:
      - "8000"
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_USER: py_arch_lab
      POSTGRES_PASSWORD: py_arch_lab
      POSTGRES_DB: ticketing_system_db
      POSTGRES_PORT: 5432
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      KAFKA_CONSUMER_INSTANCE_ID: "consumer-ticketing-1"
      # Kvrocks (for seed script initialization)
      KVROCKS_HOST: kvrocks
      KVROCKS_PORT: 6666
      # Event selection (default to event 1, can override)
      EVENT_ID: "${EVENT_ID:-1}"
      # Application
      DEBUG: "false"
      # Timezone
      TZ: "Asia/Taipei"
    env_file:
      - .env.example
    volumes:
      - ./src:/app/src:ro # Hot-reload: mount source code
      - ./script:/app/script:ro # Scripts for seeding and utilities
      - ./test:/app/test # Tests need write access for test logs
      - ./logs:/app/logs # Share logs with promtail
      - ./pyproject.toml:/app/pyproject.toml:ro # Pytest config and dependencies
    command: [ "uv", "run", "granian", "src.service.ticketing.main:app", "--interface", "asgi", "--host", "0.0.0.0", "--port", "8000", "--workers", "12", "--reload", "--reload-paths", "src" ]
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    networks:
      - ticketing-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 9G
        reservations:
          cpus: '3'
          memory: 4G

  # ============= SEAT RESERVATION SERVICE =============
  # Handles: Seat Allocation, Reservation via Kvrocks

  seat-reservation-service:
    build:
      context: .
      target: development
    # Note: No container_name to allow scaling with --scale
    ports:
      - "8200:8000" # Port range for scaled instances
    expose:
      - "8000"
    environment:
      # Database (for event metadata)
      POSTGRES_SERVER: postgres
      POSTGRES_USER: py_arch_lab
      POSTGRES_PASSWORD: py_arch_lab
      POSTGRES_DB: ticketing_system_db
      POSTGRES_PORT: 5432
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      KAFKA_CONSUMER_INSTANCE_ID: "consumer-seat-reservation-1"
      # Kvrocks
      KVROCKS_HOST: kvrocks
      KVROCKS_PORT: 6666
      # Event selection (default to event 1, can override)
      EVENT_ID: "${EVENT_ID:-1}"
      # Application
      DEBUG: "false"
      # Timezone
      TZ: "Asia/Taipei"
    env_file:
      - .env.example
    volumes:
      - ./src:/app/src:ro # Hot-reload: mount source code
      - ./test:/app/test # Tests need write access for test logs
      - ./logs:/app/logs # Share logs
      - ./state:/app/state # Quix Streams state directory
    command: [ "uv", "run", "granian", "src.service.seat_reservation.main:app", "--interface", "asgi", "--host", "0.0.0.0", "--port", "8000", "--workers", "12", "--reload", "--reload-paths", "src" ]
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
      kvrocks:
        condition: service_healthy
    networks:
      - ticketing-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 9G
        reservations:
          cpus: '2'
          memory: 2G

  # =============================================================================
  # NGINX Load Balancer (Simulates AWS ALB for local development)
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: ticketing-nginx-lb
    ports:
      - "80:80" # Main entry point - all traffic goes through here
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx # Nginx access/error logs
    networks:
      - ticketing-network
    depends_on:
      ticketing-service:
        condition: service_healthy
      seat-reservation-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  kvrocks_data:
  prometheus_data:
  grafana_data:
  loki_data:
  localstack_data:


networks:
  ticketing-network:
    driver: bridge
