server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # 票務系統應用日誌 (來自 logs/ 目錄)
  - job_name: ticketing-app-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: ticketing-system
          service: app
          __path__: /var/log/ticketing/*.log

    # 日誌解析和標籤提取
    pipeline_stages:
      # 解析 Loguru 日誌格式
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \| (?P<level>\w+)\s+\| (?P<module>[\w\.]+):(?P<line>\d+) - (?P<message>.*)'

      # 提取業務相關標籤
      - regex:
          source: message
          expression: '\[(?P<component>\w+)\]'

      - regex:
          source: message
          expression: 'booking_id=(?P<booking_id>\d+)'

      - regex:
          source: message
          expression: 'event_id=(?P<event_id>\d+)'

      - regex:
          source: message
          expression: 'section=(?P<section>[A-Z]+)'

      # 設定時間戳
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000'

      # 設定標籤
      - labels:
          level:
          component:
          module:
          booking_id:
          event_id:
          section:

  # Docker 容器日誌 (Kafka, PostgreSQL, Kvrocks)
  - job_name: container-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["kafka1", "kafka2", "kafka3", "ticketing_system_db", "kvrocks"]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'logstream'

    pipeline_stages:
      - docker: {}

      # 為不同服務添加標籤
      - match:
          selector: '{container_name=~"kafka.*"}'
          stages:
            - labels:
                service: kafka

      - match:
          selector: '{container_name="ticketing_system_db"}'
          stages:
            - labels:
                service: postgresql

      - match:
          selector: '{container_name="kvrocks"}'
          stages:
            - labels:
                service: kvrocks

  # FastAPI 服務日誌 (如果運行在容器中)
  - job_name: fastapi-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: ticketing-system
          service: fastapi
          __path__: /var/log/ticketing/fastapi.log

    pipeline_stages:
      # 解析 FastAPI 訪問日誌
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?P<level>\w+) (?P<client_ip>[\d\.]+) - "(?P<method>\w+) (?P<path>[^\s]+) (?P<protocol>[^"]+)" (?P<status_code>\d+) (?P<response_time>\d+\.\d+)ms'

      - labels:
          method:
          path:
          status_code:
          client_ip: