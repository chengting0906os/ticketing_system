name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  
jobs:
  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read Python version
        id: python-version
        run: echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Ruff check
        run: |
          uv run ruff check . --exit-non-zero-on-fix

      - name: Run Ruff format check
        run: |
          uv run ruff format . --check

  type-check:
    name: Type check with Pyrefly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read Python version
        id: python-version
        run: echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Pyrefly type check
        run: |
          uv run pyrefly check

  test:
    name: Run quick tests (unit + smoke)
    runs-on: ubuntu-latest
    needs: [lint, type-check]  # Only run if lint and type-check pass

    steps:
      - uses: actions/checkout@v4

      - name: Read Python version
        id: python-version
        run: echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Setup environment
        run: |
          cp .env.example .env
          # Set single-broker Kafka for CI
          echo "KAFKA_REPLICATION_FACTOR=1" >> .env
          mkdir -p static logs

      - name: Start services with docker compose
        run: |
          # Start only essential services for testing
          docker compose up -d scylladb1 kvrocks kafka1

      - name: Wait for services to be ready
        run: |
          echo "⏳ Waiting for services to be ready..."

          # Wait for ScyllaDB (port 9042)
          timeout 180 bash -c 'until docker exec scylladb1 cqlsh -e "describe keyspaces" > /dev/null 2>&1; do
            echo "Waiting for ScyllaDB..."
            sleep 5
          done'
          echo "✅ ScyllaDB ready"

          # Wait for Kafka (port 9092)
          timeout 60 bash -c 'until nc -z localhost 9092 2>/dev/null; do
            echo "Waiting for Kafka..."
            sleep 2
          done'
          echo "✅ Kafka ready"

          # Wait for Kvrocks (port 6666)
          timeout 30 bash -c 'until nc -z localhost 6666 2>/dev/null; do
            echo "Waiting for Kvrocks..."
            sleep 2
          done'
          echo "✅ Kvrocks ready"

          # Extra buffer time for services to stabilize
          sleep 10

      - name: Run quick tests (unit + smoke)
        env:
          SCYLLA_KEYSPACE: ticketing_system_test
          SCYLLA_CONTACT_POINTS: '["localhost"]'
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          KAFKA_REPLICATION_FACTOR: 1
          PYTHONPATH: ${{ github.workspace }}
        run: |
          make t-quick

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v