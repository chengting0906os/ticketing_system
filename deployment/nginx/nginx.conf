# Nginx Configuration for Ticketing System Load Balancing
# Optimized for high-concurrency load testing

# Auto-detect number of CPU cores
worker_processes auto;

# Maximum number of open files per worker (should be >= worker_connections)
worker_rlimit_nofile 65535;

events {
    # Maximum concurrent connections per worker
    # Total capacity = worker_processes Ã— worker_connections
    worker_connections 8192;

    # Use efficient connection processing method
    use epoll;

    # Accept multiple connections at once
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;

    # Keepalive settings for client connections
    keepalive_timeout 75s;
    keepalive_requests 1000;

    # Logging (reduced for performance)
    access_log off;  # Disable for load testing
    error_log /var/log/nginx/error.log warn;

    # Upstream services (backend servers)
    # Unified service handles all routes (ticketing + seat reservation)
    upstream ticketing_service {
        # Use least_conn algorithm for better load distribution
        least_conn;

        server ticketing-service:8000 max_fails=3 fail_timeout=30s;

        # Connection pooling to backend (reuse connections)
        keepalive 256;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint for ALB itself
        location /health {
            access_log off;
            return 200 '{"status": "healthy", "service": "nginx-alb"}';
            add_header Content-Type application/json;
        }

        # ==================== Ticketing Service Routes ====================

        # /api/user/* -> Ticketing Service
        location /api/user {
            proxy_pass http://ticketing_service;

            # Enable HTTP/1.1 and keepalive to backend
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Retry on error
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # /api/event/* -> Ticketing Service
        location /api/event {
            proxy_pass http://ticketing_service;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # /api/booking/* -> Ticketing Service
        location /api/booking {
            proxy_pass http://ticketing_service;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
        }

        # ==================== Seat Reservation Routes ====================

        # /api/reservation/* -> Unified Ticketing Service
        # Note: SSE (Server-Sent Events) endpoint at /api/reservation/{event_id}/all_subsection_status/sse
        location /api/reservation {
            proxy_pass http://ticketing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSE support (Server-Sent Events) - required for real-time seat updates
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;  # CRITICAL: disable buffering for SSE
            proxy_cache off;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;  # Longer timeout for SSE streams

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # ==================== Default Route ====================

        # Root - redirect to API docs or health check
        location / {
            return 200 '{"message": "Ticketing System Load Balancer", "routes": ["/api/user", "/api/event", "/api/booking", "/api/reservation"], "health": "/health"}';
            add_header Content-Type application/json;
        }

        # 404 for unmatched routes
        location @404 {
            return 404 '{"error": "Route not found"}';
            add_header Content-Type application/json;
        }
    }
}
