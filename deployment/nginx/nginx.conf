# Nginx Configuration for Ticketing System Load Balancing
# Simulates AWS Application Load Balancer behavior for local development

events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Upstream services (backend servers)
    # Docker Compose will automatically resolve service names even with --scale
    upstream ticketing_service {
        # Docker's internal DNS will load balance across all scaled instances
        server ticketing-service:8000 max_fails=3 fail_timeout=30s;

        # When using docker-compose up --scale ticketing-service=3
        # Docker automatically distributes requests across:
        #   - ticketing-service_1:8000
        #   - ticketing-service_2:8000
        #   - ticketing-service_3:8000
    }

    upstream seat_reservation_service {
        server seat-reservation-service:8000 max_fails=3 fail_timeout=30s;

        # Same auto-scaling behavior for seat-reservation-service
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint for ALB itself
        location /health {
            access_log off;
            return 200 '{"status": "healthy", "service": "nginx-alb"}';
            add_header Content-Type application/json;
        }

        # ==================== Ticketing Service Routes ====================

        # /api/user/* -> Ticketing Service
        location /api/user {
            proxy_pass http://ticketing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Health check (nginx will automatically retry if backend is down)
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # /api/event/* -> Ticketing Service
        location /api/event {
            proxy_pass http://ticketing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # /api/booking/* -> Ticketing Service
        location /api/booking {
            proxy_pass http://ticketing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # ==================== Seat Reservation Service Routes ====================

        # /api/reservation/* -> Seat Reservation Service
        # Note: SSE (Server-Sent Events) endpoint at /api/reservation/{event_id}/all_subsection_status/sse
        location /api/reservation {
            proxy_pass http://seat_reservation_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # SSE support (Server-Sent Events) - required for real-time seat updates
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;  # CRITICAL: disable buffering for SSE
            proxy_cache off;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;  # Longer timeout for SSE streams

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # ==================== Default Route ====================

        # Root - redirect to API docs or health check
        location / {
            return 200 '{"message": "Ticketing System Load Balancer", "routes": ["/api/user", "/api/event", "/api/booking", "/api/reservation"], "health": "/health"}';
            add_header Content-Type application/json;
        }

        # 404 for unmatched routes
        location @404 {
            return 404 '{"error": "Route not found"}';
            add_header Content-Type application/json;
        }
    }
}
