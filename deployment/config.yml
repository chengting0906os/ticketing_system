# =============================================================================
# Ticketing System Deployment Configuration
# =============================================================================
# This file contains static configuration for different environments.
# Infrastructure connection details (DB endpoints, Kafka brokers) are
# automatically injected by CDK - you don't need to fill them manually.
# =============================================================================

# Production Environment (10,000 TPS target, $300/month budget)
production:
  # AWS Configuration
  # Region: us-west-2 (Oregon)
  #   - 4 Availability Zones: us-west-2a, us-west-2b, us-west-2c, us-west-2d
  #   - More stable than us-west-2 (Virginia)
  #   - Used AZs: us-west-2a (Primary), us-west-2b (Secondary for HA)
  region: us-west-2

  # AWS Account ID will be auto-detected from credentials (~/.aws/credentials)
  # Your current account: 987879449824
  account_id: null

  # Application Settings
  environment: production
  debug: false
  log_level: INFO

  # ECS Auto-scaling (defaults for all services)
  ecs:
    min_tasks: 1
    max_tasks: 2
    cpu_threshold: 70
    memory_threshold: 80

    # Ticketing Service (debugging config - minimal resources)
    ticketing:
      task_cpu: 1024      # 1 vCPU
      task_memory: 2048   # 2 GB RAM
      workers: 1

    # Reservation Service (working config - more resources)
    reservation:
      task_cpu: 2048      # 2 vCPU
      task_memory: 4096   # 4 GB RAM
      workers: 1

  # Aurora Serverless v2 Auto-scaling
  aurora:
    min_acu: 0.5        # Minimum Aurora Capacity Units (cost optimization)
    max_acu: 64         # Maximum Aurora Capacity Units (peak load)
    # Single master configuration for cost savings

  # Database Connection Pool (single master - no read replicas)
  database:
    pool_size: 50           # Total connection pool size per task
    pool_max_overflow: 20   # Max overflow connections
    pool_timeout: 30        # Connection timeout (seconds)
    pool_recycle: 3600      # Recycle connections every hour
    pool_pre_ping: true     # Verify connections before use

  # Kvrocks Connection Pool
  kvrocks:
    pool_max_connections: 10000
    pool_socket_timeout: 5
    pool_socket_connect_timeout: 5
    pool_health_check_interval: 30

  # Security
  jwt:
    access_token_expire_minutes: 60   # 1 hour
    refresh_token_expire_days: 7      # 7 days
    algorithm: HS256

  # Feature Flags
  features:
    dynamic_pricing: false
    seat_recommendation: true
    payment_gateway: true
    email_notifications: false

  # Monitoring
  monitoring:
    cloudwatch_logs_retention_days: 7
    container_insights_enabled: true
    xray_tracing_enabled: false

  # Performance
  performance:
    rate_limit_per_minute: 1000
    request_timeout: 30
    max_request_size_mb: 10

# Staging Environment (lower capacity for cost savings)
staging:
  # AWS Configuration
  # Same region and AZs as production for consistency
  region: us-west-2
  account_id: null  # Auto-detected

  environment: staging
  debug: false
  log_level: INFO

  ecs:
    min_tasks: 2
    max_tasks: 8
    cpu_threshold: 70
    memory_threshold: 80
    task_cpu: 1024      # 1 vCPU (smaller than prod)
    task_memory: 2048   # 2 GB RAM
    workers: 2          # Workers per task

  aurora:
    min_acu: 0.5        # Lower minimum for cost savings
    max_acu: 16

  database:
    pool_size: 5000         # Total connection pool size per task
    pool_max_overflow: 500  # Max overflow connections
    pool_timeout: 30        # Connection timeout (seconds)
    pool_recycle: 3600      # Recycle connections every hour
    pool_pre_ping: true     # Verify connections before use

  kvrocks:
    pool_max_connections: 10000
    pool_socket_timeout: 5
    pool_socket_connect_timeout: 5
    pool_health_check_interval: 30

  jwt:
    access_token_expire_minutes: 120  # 2 hours (more relaxed)
    refresh_token_expire_days: 14
    algorithm: HS256

  features:
    dynamic_pricing: true   # Test new features in staging
    seat_recommendation: true
    payment_gateway: false  # Use mock payment in staging
    email_notifications: false

  monitoring:
    cloudwatch_logs_retention_days: 3
    container_insights_enabled: true
    xray_tracing_enabled: false

  performance:
    rate_limit_per_minute: 500
    request_timeout: 30
    max_request_size_mb: 10

# Development Environment (minimal resources for testing)
development:
  # AWS Configuration
  # Same region and AZs as production for consistency
  region: us-west-2
  account_id: null  # Auto-detected

  environment: development
  debug: true
  log_level: DEBUG

  ecs:
    min_tasks: 1
    max_tasks: 4
    cpu_threshold: 80
    memory_threshold: 85
    task_cpu: 1024      # 1 vCPU (same as production for consistency)
    task_memory: 2048   # 2 GB RAM (same as production for consistency)
    workers: 1          # Workers per task

  aurora:
    min_acu: 0.5
    max_acu: 8

  database:
    pool_size: 20           # Total connection pool size
    pool_max_overflow: 100   # Max overflow connections
    pool_timeout: 30        # Connection timeout (seconds)
    pool_recycle: 3600      # Recycle connections every hour
    pool_pre_ping: true     # Verify connections before use

  kvrocks:
    pool_max_connections: 10000
    pool_socket_timeout: 5
    pool_socket_connect_timeout: 5
    pool_health_check_interval: 30

  jwt:
    access_token_expire_minutes: 1440  # 24 hours (for easier testing)
    refresh_token_expire_days: 30
    algorithm: HS256

  features:
    dynamic_pricing: true   # Enable all features for testing
    seat_recommendation: true
    payment_gateway: false  # Always use mock in dev
    email_notifications: false

  monitoring:
    cloudwatch_logs_retention_days: 1
    container_insights_enabled: false  # Save cost in dev
    xray_tracing_enabled: false

  performance:
    rate_limit_per_minute: 100
    request_timeout: 60   # Longer timeout for debugging
    max_request_size_mb: 5

# =============================================================================
# NOTES
# =============================================================================
#
# What you DON'T need to configure (auto-injected by CDK):
# - Database endpoints (Aurora writer/reader)
# - Database credentials (from Secrets Manager)
# - Kafka bootstrap servers (from MSK)
# - Kvrocks endpoints (from ECS Service Discovery)
# - ALB DNS name
# - VPC and security group IDs
#
# How to use:
# 1. Choose environment: production | staging | development
# 2. Run: make cdk-deploy-dev (or staging/prod)
# 3. CDK will read this file and apply the configuration
#
# Cost estimate (production config):
# - Aurora: ~$70/month (avg 8 ACU)
# - MSK: ~$150/month (3 × kafka.m5.large)
# - ECS: ~$60/month (8 tasks × 2 vCPU, 4GB)
# - Kvrocks: ~$25/month (6 tasks × 1 vCPU, 2GB)
# - Other: ~$33/month (ALB, CloudWatch, etc.)
# Total: ~$338/month
#
